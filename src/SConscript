import os

Import('env')

## Build turbooctospice library
env.Library('turbooctospice', Glob('#lib/*.cc'))

## Compile C++ programs
common_libs = ['likely', 'cosmo', 'boost_program_options']
bucketxi = env.Program('bucketxi', 'bucketxi.cc', LIBS=common_libs)
kdtreetest = env.Program('kdtreetest', 'kdtreetest.cc', LIBS=common_libs + ['kdtree'])
bucketsky = env.Program('bucketsky', 'bucketsky.cc', LIBS=common_libs + ['turbooctospice'],LIBPATH='.')

healCpp = '/Users/daniel/source/Healpix_3.11/src/cxx/basic_gcc/include'
healLib = '/Users/daniel/source/Healpix_3.11/src/cxx/basic_gcc/lib'
healtest = env.Program('healtest', 'healtest.cc', LIBS=common_libs + ['healpix_cxx','cxxsupport'],
	LIBPATH=healLib, CPPPATH=healCpp )
mockdata = env.Program('mockdata', 'mockdata.cc', 
	LIBS=common_libs+['cfitsio','CCfits','turbooctospice'],LIBPATH='.')
## Compile CUDA programs

#env['BUILDERS']['CudaProgram'] = Builder(action = '/usr/local/cuda/bin/nvcc -m64 -arch=sm_20 -o $TARGET $SOURCE $LIBS', src_suffix = '.cu', suffix = '')
# Need to propagate environment path so scons can find the nvcc compile
cudaEnv = Environment(ENV={'PATH' : os.environ['PATH']})
cudaEnv.Replace(CC='nvcc')

cudaEnv.Append(CCFLAGS=['-02'])
# Atomic add requires minimum architecture
cudaEnv.Append(LINKFLAGS=['-m64', '-arch=sm_20'])
cudaEnv.Program('deviceQuery', 'deviceQuery.cu')
#cudaEnv.Program('gpuxi', 'gpuxi.cu', LIBS=['likely', 'boost_program_options'])

# Custom install directory

#prefix = "/usr/local"
#install_programs = [bucketxi, kdtreetest]
#env.Alias('install', env.Install(os.path.join(prefix, "bin"), install_programs))