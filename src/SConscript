import os

Import('env')

## Build turbooctospice library
env.Library('turbooctospice', Glob('#turbooctospice/*.cc'))

tos = ['turbooctospice']
tosCppPath = ['../turbooctospice']
tosLibPath = ['../build']

common = ['likely', 'cosmo', 'boost_program_options', 'boost_system', 'boost_thread', 'boost_coroutine']

### Common libs only
bucketxi = env.Program('bucketxi', 'bucketxi.cc', LIBS=common)

### Requires kdtree library
kdtreetest = env.Program('kdtreetest', 'kdtreetest.cc', LIBS=common+['kdtree'])

### Requires HealPix library
healCppPath = ['/Users/daniel/source/Healpix_3.11/src/cxx/basic_gcc/include']
healLibPath = ['/Users/daniel/source/Healpix_3.11/src/cxx/basic_gcc/lib']
healLibs = ['healpix_cxx','cxxsupport']
# healOptions = {'LIBS':healLibs, 'LIBPATH':healLibs, 'CPPPATH':healCppPath}

# healtest = env.Program('healtest', 'healtest.cc',**healOptions)
healtest = env.Program('healtest', 'healtest.cc', LIBS=common+healLibs, LIBPATH=healLibPath, CPPPATH=healCppPath )

### Requires tos library
bucketsky = env.Program('bucketsky', 'bucketsky.cc',LIBS=common+tos, LIBPATH=tosLibPath, CPPPATH=tosCppPath)

templatexi = env.Program('templatexi', 'templatexi.cc',
	LIBS=common+tos+healLibs, 
	LIBPATH=tosLibPath+healLibPath, 
	CPPPATH=tosCppPath+healCppPath,
	CPPDEFINES = ['HAVE_LIBHEAL','BOOST_COROUTINES_UNIDIRECT'])

### Requires fits / ccfits libraries
cfitsLibs = ['cfitsio','CCfits']
mockdata = env.Program('mockdata', 'mockdata.cc', LIBS=common+tos+cfitsLibs, LIBPATH=tosLibPath, CPPPATH=tosCppPath)

## Compile CUDA programs

#env['BUILDERS']['CudaProgram'] = Builder(action = '/usr/local/cuda/bin/nvcc -m64 -arch=sm_20 -o $TARGET $SOURCE $LIBS', src_suffix = '.cu', suffix = '')
# Need to propagate environment path so scons can find the nvcc compile
cudaEnv = Environment(ENV={'PATH' : os.environ['PATH']})
cudaEnv.Replace(CC='nvcc')

cudaEnv.Append(CCFLAGS=['-02'])
# Atomic add requires minimum architecture
cudaEnv.Append(LINKFLAGS=['-m64', '-arch=sm_20', '-DBOOST_NOINLINE=__attribute__ ((noinline))'])
cudaEnv.Program('deviceQuery', 'deviceQuery.cu')
cudaEnv.Program('gpuxi', 'gpuxi.cu', LIBS=['likely', 'boost_program_options'])

# Custom install directory

#prefix = "/usr/local"
#install_programs = [bucketxi, kdtreetest]
#env.Alias('install', env.Install(os.path.join(prefix, "bin"), install_programs))