import os

Import('env')

common_libs = ['likely', 'cosmo', 'boost_program_options']


## Compile C++ programs
opt = env.Clone()

#opt.Library('turbooctospice', ['#lib/Triangle.cc', '#lib/TriangleMesh.cc'])

bucketxi = opt.Program('#bin/bucketxi', 'bucketxi.cc', LIBS=common_libs)
kdtreetest = opt.Program('#bin/kdtreetest', 'kdtreetest.cc', LIBS=common_libs + ['kdtree'])
bucketsky = opt.Program('#bin/bucketsky', 'bucketsky.cc', LIBS=common_libs + ['turbooctospice'], LIBPATH='.')


healCpp = '/Users/daniel/source/Healpix_3.11/src/cxx/basic_gcc/include'
healLib = '/Users/daniel/source/Healpix_3.11/src/cxx/basic_gcc/lib'
healtest = opt.Program('#bin/healtest', 'healtest.cc', LIBS=common_libs + ['healpix_cxx','cxxsupport'],
	LIBPATH=healLib, CPPPATH=healCpp )
## Compile CUDA programs

#env['BUILDERS']['CudaProgram'] = Builder(action = '/usr/local/cuda/bin/nvcc -m64 -arch=sm_20 -o $TARGET $SOURCE $LIBS', src_suffix = '.cu', suffix = '')
# Need to propagate environment path so scons can find the nvcc compile
cudaEnv = Environment(ENV={'PATH' : os.environ['PATH']})
cudaEnv.Replace(CC='nvcc')

cudaEnv.Append(CCFLAGS=['-02'])
# Atomic add requires minimum architecture
cudaEnv.Append(LINKFLAGS=['-m64', '-arch=sm_20'])
cudaEnv.Program('#bin/deviceQuery', 'deviceQuery.cu')
#cudaEnv.Program('#bin/gpuxi', 'gpuxi.cu', LIBS=['likely', 'boost_program_options'])

# Custom install directory

#prefix = "/usr/local"
#install_programs = [bucketxi, kdtreetest]
#env.Alias('install', env.Install(os.path.join(prefix, "bin"), install_programs))